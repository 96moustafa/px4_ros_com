sudo: required

env:
  global:
    - CCACHE_DIR=${HOME}/.ccache
    - PX4_FIRMWARE=https://github.com/PX4/Firmware.git
    - PX4_MSGS=https://github.com/PX4/px4_msgs.git
    - BUILD_PX4_FIRMWARE_RTPS="git clone ${PX4_FIRMWARE} ~/PX4/Firmware; cd ~/PX4/Firmware; DONT_RUN=1 make px4_sitl_rtps gazebo; cd $pwd;"

matrix:
  include:
    - name: Build on ROS2 Ardent
      os: linux
      language: cpp
      services:
        - docker
      cache:
      ccache: true
      env:
        - ROS2_DISTRO=ardent
        - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
        - BUILD_ARGS="--no_ros1_bridge --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
        - COLCON_BUILD="cd src/px4_ros_com/scripts && ./build_ros2_workspace.bash"
        - DOCKER_CONTAINER=px4io/px4-dev-ros2-ardent:2019-11-03
        - TEST_SETUP=""
        - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon_ws/src; cd ~/colcon_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master src/px4_msgs;"

    - name: Build on ROS2 Bouncy
      os: linux
      language: cpp
      services:
        - docker
      cache:
      ccache: true
      env:
        - ROS2_DISTRO=bouncy
        - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
        - BUILD_ARGS="--no_ros1_bridge --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
        - COLCON_BUILD="cd src/px4_ros_com/scripts && ./build_ros2_workspace.bash"
        - DOCKER_CONTAINER=px4io/px4-dev-ros2-bouncy:2019-11-03
        - TEST_SETUP="source ~/colcon_ws/install/setup.bash; cd ~/colcon_ws/src/px4_ros_com/test; python3 flight_controller_output.py -p ~/PX4/Firmware/;"
        - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon_ws/src; cd ~/colcon_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master src/px4_msgs;"

    - name: Build on ROS2 Crystal
      os: linux
      language: cpp
      services:
        - docker
      cache:
      ccache: true
      env:
        - ROS2_DISTRO=crystal
        - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
        - BUILD_ARGS="--no_ros1_bridge --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
        - COLCON_BUILD="cd src/px4_ros_com/scripts && ./build_ros2_workspace.bash"
        - DOCKER_CONTAINER=px4io/px4-dev-ros2-crystal:2019-11-03
        - TEST_SETUP="source ~/colcon_ws/install/setup.bash; cd ~/colcon_ws/src/px4_ros_com/test; python3 flight_controller_output.py -p ~/PX4/Firmware/;"
        - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon_ws/src; cd ~/colcon_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master src/px4_msgs;"

    # - name: Build on ROS2 Dashing
    #   os: linux
    #   language: cpp
    #   services:
    #     - docker
    #   cache:
    #   ccache: true
    #   env:
    #     - ROS2_DISTRO=dashing
    #     - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
    #     - BUILD_ARGS="--no_ros1_bridge --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
    #     - COLCON_BUILD="cd src/px4_ros_com/scripts && ./build_ros2_workspace.bash"
    #     - DOCKER_CONTAINER=px4io/px4-dev-ros2-dashing:2019-11-03
    #     - TEST_SETUP=""
    #     - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon_ws/src; cd ~/colcon_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master src/px4_msgs;"

    # - name: Build full pipeline (px4_ros_com + ros1_bridge) on ROS2 Dashing
    #   os: linux
    #   language: cpp
    #   services:
    #     - docker
    #   cache:
    #   ccache: true
    #   env:
    #     - ROS2_DISTRO=dashing
    #     - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
    #     - FULL_BUILD="ON"
    #     - BUILD_ARGS="--ros1_ws_dir ~/colcon1_ws --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
    #     - COLCON_BUILD="./ci_build/build_all_ci.bash"
    #     - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon1_ws/src; cd ~/colcon1_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b ros1; cd src/px4_ros_com; git checkout ros1; cd $pwd; mkdir -p ~/colcon2_ws/src; cd ~/colcon2_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master; cd src/px4_ros_com/scripts;"
    #     - DOCKER_CONTAINER=px4io/px4-dev-ros2-dashing:2019-11-03

    # - name: Build on ROS2 Eloquent
    #   os: linux
    #   language: cpp
    #   services:
    #     - docker
    #   cache:
    #   ccache: true
    #   env:
    #     - ROS2_DISTRO=eloquent
    #     - ROS2_ENV_PATH=/opt/ros/${ROS2_DISTRO}/setup.bash
    #     - BUILD_ARGS="--no_ros1_bridge --ros_distro ${ROS2_DISTRO} --ros_path ${ROS2_ENV_PATH}"
    #     - COLCON_BUILD="cd src/px4_ros_com/scripts && ./build_ros2_workspace.bash"
    #     - DOCKER_CONTAINER=px4io/px4-dev-ros2-eloquent:2019-11-03
    #     - TEST_SETUP=""
    #     - WS_SETUP="unset ROS_DISTRO; mkdir -p ~/colcon_ws/src; cd ~/colcon_ws; ln -s ${TRAVIS_BUILD_DIR} src/px4_ros_com; git clone ${PX4_MSGS} -b master src/px4_msgs;"

script:
  - if [[ $TRAVIS_BRANCH =~ "master" ]] || [[ $TRAVIS_BRANCH =~ "ros2" ]] || [[ ! "$TRAVIS_BRANCH" =~ "ros1" ]]; then
        docker run -it --rm -w ${TRAVIS_BUILD_DIR}
          --env=CCACHE_DIR="${CCACHE_DIR}"
          --env=LOCAL_USER_ID="$(id -u)"
          --volume=${CCACHE_DIR}:${CCACHE_DIR}:rw
          --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR}:rw
          ${DOCKER_CONTAINER} /bin/bash -c "${BUILD_PX4_FIRMWARE_RTPS} ${WS_SETUP} ${COLCON_BUILD} ${BUILD_ARGS}; ${TEST_SETUP}";
    fi
    # CI runs over all branches containing 'master' or 'ros2' on the name or that do not contain 'ros1' in the name
    # if [[ $FULL_BUILD == "ON"]]; then
    #   docker run -it --name px4ros -w ${TRAVIS_BUILD_DIR}
    #     --env=CCACHE_DIR="${CCACHE_DIR}"
    #     --env=LOCAL_USER_ID="$(id -u)"
    #     --volume=${CCACHE_DIR}:${CCACHE_DIR}:rw
    #     --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR}:rw
    #     ${DOCKER_CONTAINER} /bin/bash -c "${BUILD_PX4_FIRMWARE_RTPS} ${WS_SETUP} ${COLCON_BUILD} ${BUILD_ARGS}"
    #   docker exec -it -w ${TRAVIS_BUILD_DIR} px4ros /bin/bash ${TRAVIS_BUILD_DIR}/scripts/ci_build/build_ros1.bash
    #   docker exec -it -w ${TRAVIS_BUILD_DIR} px4ros /bin/bash ${TRAVIS_BUILD_DIR}/scripts/ci_build/build_ros1_bridge.bash
    #   docker exec -it -w ${TRAVIS_BUILD_DIR} px4ros /bin/bash ${TRAVIS_BUILD_DIR}/scripts/ci_build/config_agent.bash
    # else
